// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethereum-optimism/infra/op-signer/provider (interfaces: CloudKMSClient)

// Package provider is a generated GoMock package.
package provider

import (
	context "context"
	reflect "reflect"

	kmspb "cloud.google.com/go/kms/apiv1/kmspb"
	gomock "github.com/golang/mock/gomock"
	gax "github.com/googleapis/gax-go/v2"
)

// MockCloudKMSClient is a mock of CloudKMSClient interface.
type MockCloudKMSClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudKMSClientMockRecorder
}

// MockCloudKMSClientMockRecorder is the mock recorder for MockCloudKMSClient.
type MockCloudKMSClientMockRecorder struct {
	mock *MockCloudKMSClient
}

// NewMockCloudKMSClient creates a new mock instance.
func NewMockCloudKMSClient(ctrl *gomock.Controller) *MockCloudKMSClient {
	mock := &MockCloudKMSClient{ctrl: ctrl}
	mock.recorder = &MockCloudKMSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudKMSClient) EXPECT() *MockCloudKMSClientMockRecorder {
	return m.recorder
}

// AsymmetricSign mocks base method.
func (m *MockCloudKMSClient) AsymmetricSign(arg0 context.Context, arg1 *kmspb.AsymmetricSignRequest, arg2 ...gax.CallOption) (*kmspb.AsymmetricSignResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AsymmetricSign", varargs...)
	ret0, _ := ret[0].(*kmspb.AsymmetricSignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsymmetricSign indicates an expected call of AsymmetricSign.
func (mr *MockCloudKMSClientMockRecorder) AsymmetricSign(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsymmetricSign", reflect.TypeOf((*MockCloudKMSClient)(nil).AsymmetricSign), varargs...)
}

// GetPublicKey mocks base method.
func (m *MockCloudKMSClient) GetPublicKey(arg0 context.Context, arg1 *kmspb.GetPublicKeyRequest, arg2 ...gax.CallOption) (*kmspb.PublicKey, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPublicKey", varargs...)
	ret0, _ := ret[0].(*kmspb.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockCloudKMSClientMockRecorder) GetPublicKey(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockCloudKMSClient)(nil).GetPublicKey), varargs...)
}
