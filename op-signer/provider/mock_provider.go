// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethereum-optimism/infra/op-signer/provider (interfaces: SignatureProvider)

// Package provider is a generated GoMock package.
package provider

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSignatureProvider is a mock of SignatureProvider interface.
type MockSignatureProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSignatureProviderMockRecorder
}

// MockSignatureProviderMockRecorder is the mock recorder for MockSignatureProvider.
type MockSignatureProviderMockRecorder struct {
	mock *MockSignatureProvider
}

// NewMockSignatureProvider creates a new mock instance.
func NewMockSignatureProvider(ctrl *gomock.Controller) *MockSignatureProvider {
	mock := &MockSignatureProvider{ctrl: ctrl}
	mock.recorder = &MockSignatureProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignatureProvider) EXPECT() *MockSignatureProviderMockRecorder {
	return m.recorder
}

// GetPublicKey mocks base method.
func (m *MockSignatureProvider) GetPublicKey(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockSignatureProviderMockRecorder) GetPublicKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockSignatureProvider)(nil).GetPublicKey), arg0, arg1)
}

// SignDigest mocks base method.
func (m *MockSignatureProvider) SignDigest(arg0 context.Context, arg1 string, arg2 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignDigest", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignDigest indicates an expected call of SignDigest.
func (mr *MockSignatureProviderMockRecorder) SignDigest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignDigest", reflect.TypeOf((*MockSignatureProvider)(nil).SignDigest), arg0, arg1, arg2)
}
